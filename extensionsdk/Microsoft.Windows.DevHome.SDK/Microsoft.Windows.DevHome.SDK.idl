namespace Microsoft.Windows.DevHome.SDK
{
    
    [contractversion(3)]
    apicontract DevHomeContract {}

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IExtension {
        IInspectable GetProvider(ProviderType providerType);
        void Dispose();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum ProviderType {
        Repository = 0,
        DeveloperId = 1,
        Settings = 2,
        FeaturedApplications = 3,

        [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        ComputeSystem = 4,
    };

    // Definitions for exceptions.
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum ProviderOperationStatus {
        Success,
        Failure
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass ProviderOperationResult {
        ProviderOperationResult(ProviderOperationStatus status, HRESULT error, String displayMessage, String diagnosticText);

        ProviderOperationStatus Status
        {
            get;
        };
        HRESULT ExtendedError
        {
            get;
        };
        String DisplayMessage
        {
            get;
        };
        String DiagnosticText
        {
            get;
        };
    };

    // Repository Provider
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IRepositoryProvider
        requires Windows.Foundation.IClosable
    {
        String DisplayName
        {
            get;
        };
        Windows.Storage.Streams.IRandomAccessStreamReference Icon
        {
            get;
        };

        Windows.Foundation.IAsyncOperation<RepositoriesResult> GetRepositoriesAsync(IDeveloperId developerId);

        Windows.Foundation.IAsyncOperation<RepositoryUriSupportResult> IsUriSupportedAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperation<RepositoryUriSupportResult> IsUriSupportedAsync(Windows.Foundation.Uri uri, IDeveloperId developerId);

        Windows.Foundation.IAsyncOperation<RepositoryResult> GetRepositoryFromUriAsync(Windows.Foundation.Uri uri);
        Windows.Foundation.IAsyncOperation<RepositoryResult> GetRepositoryFromUriAsync(Windows.Foundation.Uri uri, IDeveloperId developerId);

        Windows.Foundation.IAsyncOperation<ProviderOperationResult> CloneRepositoryAsync(IRepository repository, String cloneDestination);
        Windows.Foundation.IAsyncOperation<ProviderOperationResult> CloneRepositoryAsync(IRepository repository, String cloneDestination, IDeveloperId developerId);
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass RepositoryResult {
        RepositoryResult(IRepository repository);
        RepositoryResult(HRESULT e, String diagnosticText);

        IRepository Repository
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass RepositoriesResult {
        RepositoriesResult(IIterable<IRepository> repositories);
        RepositoriesResult(HRESULT e, String diagnosticText);

        IIterable<IRepository> Repositories
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass RepositoryUriSupportResult {
        RepositoryUriSupportResult(Boolean isSupported);
        RepositoryUriSupportResult(HRESULT e, String diagnosticText);

        Boolean IsSupported
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IRepository {
        String DisplayName
        {
            get;
        };
        String OwningAccountName
        {
            get;
        };
        Boolean IsPrivate
        {
            get;
        };
        Windows.Foundation.DateTime LastUpdated
        {
            get;
        };
        Windows.Foundation.Uri RepoUri
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum AuthenticationState {
        LoggedIn = 0,
        LoggedOut = 1
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum AuthenticationExperienceKind {
        CustomProvider = 0,
        CardSession = 1
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass AdaptiveCardSessionResult {
        AdaptiveCardSessionResult(IExtensionAdaptiveCardSession adaptiveCardSession);
        AdaptiveCardSessionResult(HRESULT e, String diagnosticText);

        IExtensionAdaptiveCardSession AdaptiveCardSession
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass DeveloperIdResult {
        DeveloperIdResult(IDeveloperId developerId);
        DeveloperIdResult(HRESULT e, String diagnosticText);

        IDeveloperId DeveloperId
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass DeveloperIdsResult {
        DeveloperIdsResult(IIterable<IDeveloperId> developerIds);
        DeveloperIdsResult(HRESULT e, String diagnosticText);

        IIterable<IDeveloperId> DeveloperIds
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    // IDeveloperId is the basic interface for DeveloperId corresponding to each logged in user, used by the Dev Home Core app
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IDeveloperId {
        String LoginId
        {
            get;
        };

        String Url
        {
            get;
        };
    };

    // Developer ID
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IDeveloperIdProvider
        requires Windows.Foundation.IClosable
    {
        String DisplayName
        {
            get;
        };

        DeveloperIdsResult GetLoggedInDeveloperIds();

        ProviderOperationResult LogoutDeveloperId(IDeveloperId developerId);

        event Windows.Foundation.TypedEventHandler<IDeveloperIdProvider, IDeveloperId> Changed;

        AuthenticationState GetDeveloperIdState(IDeveloperId developerId);

        // The extension chooses to support one enum Option. Once defined by the extension this value cannot be
        // changed by DevHome or the extension itself.
        AuthenticationExperienceKind GetAuthenticationExperienceKind();

        //ExtensionProvidedExperience
        Windows.Foundation.IAsyncOperation<DeveloperIdResult> ShowLogonSession(Microsoft.UI.WindowId windowHandle);

        //DevHomeIntegratedCard
        AdaptiveCardSessionResult GetLoginAdaptiveCardSession();
    };

    // Settings
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface ISettingsProvider
        requires Windows.Foundation.IClosable
    {
        String DisplayName
        {
            get;
        };

        //DevHomeIntegratedCard
        AdaptiveCardSessionResult GetSettingsAdaptiveCardSession();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IExtensionAdaptiveCardSession {
        ProviderOperationResult Initialize(IExtensionAdaptiveCard extensionUI);
        void Dispose();
        Windows.Foundation.IAsyncOperation<ProviderOperationResult> OnAction(String action, String inputs);
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IExtensionAdaptiveCard {
        String TemplateJson
        {
            get;
        };
        String DataJson
        {
            get;
        };
        String State
        {
            get;
        };

        ProviderOperationResult Update(String templateJson, String dataJson, String state);
    };

    // Interface to get the list of featured applications
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IFeaturedApplicationsProvider {
        Windows.Foundation.IAsyncOperation<GetFeaturedApplicationsGroupsResult> GetFeaturedApplicationsGroupsAsync();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass GetFeaturedApplicationsGroupsResult {
        GetFeaturedApplicationsGroupsResult(IVectorView<IFeaturedApplicationsGroup> featuredApplicationsGroup);
        GetFeaturedApplicationsGroupsResult(HRESULT e, String diagnosticText);

        IVectorView<IFeaturedApplicationsGroup> FeaturedApplicationsGroups
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    runtimeclass GetFeaturedApplicationsResult {
        GetFeaturedApplicationsResult(IVectorView<String> featuredApplications);
        GetFeaturedApplicationsResult(HRESULT e, String diagnosticText);

        IVectorView<String> FeaturedApplications
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    }

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IFeaturedApplicationsGroup {
        String GetTitle(String preferredLocale);
        String GetDescription(String preferredLocale);
        GetFeaturedApplicationsResult GetApplications();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        runtimeclass ComputeSystemOperationResult
    {
        ComputeSystemOperationResult(String jsonResponseData);
        ComputeSystemOperationResult(HRESULT e, String diagnosticText, String jsonResponseData);

        String JsonResponseData
        {
            get;
        };

        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        runtimeclass ComputeSystemsResult
    {
        ComputeSystemsResult(IIterable<IComputeSystem> computeSystems);
        ComputeSystemsResult(HRESULT e, String diagnosticText);

        IIterable<IComputeSystem> ComputeSystems
        {
            get;
        };

        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        enum ComputeSystemProviderOperation
    {
        CreateComputeSystem = 0x00000001,
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        enum ComputeSystemOperations
    {
        Start = 0x00000001,
        ShutDown = 0x00000002,
        Terminate = 0x00000004,
        Delete = 0x00000008,
        Save = 0x00000010,
        Pause = 0x00000020,
        Resume = 0x00000040,
        CreateSnapshot = 0x00000100,
        ApplySnapshot = 0x00000200,
        DeleteSnapshot = 0x00000400,
        ModifyProperties = 0x00000800,
        ApplyConfiguration = 0x00001000,
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        enum ComputeSystemState
    {
        Created = 0x00000001,
        Running = 0x00000002,
        Paused = 0x00000004,
        Stopped = 0x00000008,
        Saved = 0x00000010,
        SavedAsTemplate = 0x00000020,
        Unknown = 0x00000040,
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        interface IComputeSystem
    {
        String Name{ get; };
        String Id{ get; };
        ComputeSystemOperations SupportedOperations{ get; };

        Windows.Foundation.IAsyncOperation <ComputeSystemStateResult> GetState(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> Start(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> ShutDown(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> Terminate(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> Delete(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> Save(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> Pause(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> Resume(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> CreateSnapshot(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> ApplySnapshot(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> DeleteSnapshot(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> GetProperties(String options);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> ModifyProperties(String properties);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> Connect(String properties);

        Windows.Foundation.IAsyncOperation <ComputeSystemOperationResult> ApplyConfiguration(String configuration);
    };
   
    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        runtimeclass CreateComputeSystemResult
    {
        CreateComputeSystemResult(IComputeSystem computeSystem);
        CreateComputeSystemResult(HRESULT e, String diagnosticText);

        IComputeSystem ComputeSystem
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        runtimeclass ComputeSystemStateResult
    {
        ComputeSystemStateResult(ComputeSystemState computeSystemState);
        ComputeSystemStateResult(HRESULT e, String diagnosticText);

        ComputeSystemState GetComputeSystemState
        {
            get;
        };
        ProviderOperationResult Result
        {
            get;
        };
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 3)]
        interface IComputeSystemProvider
    {
        String DisplayName{ get; };
        String Id{ get; };
        String Properties{ get; };
        ComputeSystemProviderOperation SupportedOperations{ get; };
        String DefaultComputeSystemProperties{ get; set; };

        Windows.Foundation.IAsyncOperation<ComputeSystemsResult> GetComputeSystemsAsync(IDeveloperId developerId, String options);

        Windows.Foundation.IAsyncOperation <CreateComputeSystemResult> CreateComputeSystemAsync(String options);
    };
}