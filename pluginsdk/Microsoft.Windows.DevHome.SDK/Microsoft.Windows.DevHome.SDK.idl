namespace Microsoft.Windows.DevHome.SDK
{
    [contractversion(1)] 
    apicontract DevHomeContract {}

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    enum ProviderType
    {
        Repository = 0,
        DeveloperId = 1,
        Settings = 2,
        SetupFlow = 3,
        Widget = 4,
        DevDoctor = 5,
        Notifications = 6
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IPlugin 
    {
        IInspectable GetProvider(ProviderType providerType);
        void Dispose();
    }

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IRepositoryProvider 
    {
        String DisplayName { get; };

        Windows.Foundation.IAsyncOperation<IIterable<IRepository> > GetRepositoriesAsync(IDeveloperId developerId);

        Windows.Foundation.IAsyncOperation <IRepository> ParseRepositoryFromUrlAsync(Windows.Foundation.Uri uri);
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IRepository {

        String DisplayName { get; };

        String OwningAccountName { get; };

        Boolean IsPrivate { get; };

        Windows.Foundation.DateTime LastUpdated { get; };

        Windows.Foundation.IAsyncAction CloneRepositoryAsync(String cloneDestination, IDeveloperId developerId);

        Windows.Foundation.IAsyncAction CloneRepositoryAsync(String cloneDestination);
    }

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)] 
    interface ISettingsProvider 
    {
        String GetName();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IPluginAdaptiveCardController 
    {
        void Initialize(IPluginAdaptiveCard pluginUI);
        void Dispose();
        void OnAction(String action, String inputs);
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IPluginAdaptiveCard
    {
        String TemplateJson { get; };
        String DataJson { get; };
        String State { get; };

        void Update(String templateJson, String dataJson, String state);
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IDeveloperIdProvider
    {
        String GetName();

        IIterable<IDeveloperId> GetLoggedInDeveloperIds();

        Windows.Foundation.IAsyncOperation<IDeveloperId> LoginNewDeveloperIdAsync();

        void LogoutDeveloperId(IDeveloperId developerId);

        IPluginAdaptiveCardController GetAdaptiveCardController(String[] args);

        event Windows.Foundation.EventHandler<IDeveloperId> LoggedIn;

        event Windows.Foundation.EventHandler<IDeveloperId> LoggedOut;

        event Windows.Foundation.EventHandler<IDeveloperId> Updated;
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface ISetupFlowProvider 
    {
        String GetName();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    interface IWidgetProvider 
    {
        String GetName();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)] 
    interface IDevDoctorProvider 
    {
        String GetName();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)] 
    interface INotificationsProvider 
    {
        String GetName();
    };

    [contract(Microsoft.Windows.DevHome.SDK.DevHomeContract, 1)]
    // IDeveloperId is the basic interface for DeveloperId corresponding to each logged in user, used by the Dev Home Core app
    interface IDeveloperId
    {
        String LoginId();
        String Url();
    };


}
