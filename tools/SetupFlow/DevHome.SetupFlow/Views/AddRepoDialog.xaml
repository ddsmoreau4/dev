<!-- Copyright (c) Microsoft Corporation.. -->
<!-- Licensed under the MIT License. -->

<ContentDialog x:Class="DevHome.SetupFlow.Views.AddRepoDialog"
               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
               xmlns:converters="using:CommunityToolkit.WinUI.Converters"
               xmlns:ctControls="using:CommunityToolkit.WinUI.Controls"
               xmlns:models="using:DevHome.SetupFlow.Models"
               mc:Ignorable="d"
               x:Uid="CloneRepoDialog"
               x:Name="AddRepoContentDialog"
               PrimaryButtonClick="AddRepoContentDialog_PrimaryButtonClick"
               IsPrimaryButtonEnabled="{x:Bind AddRepoViewModel.ShouldEnablePrimaryButton, Mode=OneWay}"
               DefaultButton="Primary"
               Style="{StaticResource DefaultContentDialogStyle}"
               PrimaryButtonText="{x:Bind AddRepoViewModel.PrimaryButtonText, Mode=OneWay}"
               CornerRadius="8"
               xmlns:ic="using:Microsoft.Xaml.Interactions.Core"
               xmlns:i="using:Microsoft.Xaml.Interactivity">
    <ContentDialog.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="ms-appx:///DevHome.SetupFlow/Styles/SetupFlowStyles.xaml"/>
                <ResourceDictionary>
                    <converters:BoolToVisibilityConverter x:Key="NegatedBoolToVisibilityConverter" TrueValue="Collapsed" FalseValue="Visible"/>
                    <converters:BoolToObjectConverter x:Key="BoolToGlyphConverter" TrueValue="&#xF0BD;" FalseValue="&#xF03F;"/>
                    <converters:BoolNegationConverter x:Key="BoolToNegationConverter"/>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </ContentDialog.Resources>
    <!-- ContentDialog has a padding of 24 on left/right. Extend the ScrollViewer there to show the scroll bar at the edge of the dialog. -->
    <ScrollViewer VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto" Padding="24,0" Margin="-24,0">
        <StackPanel x:Name="AddRepoStackPanel" Orientation="Vertical" Spacing="5" MinWidth="450" MinHeight="550"  MaxWidth="450">
            <StackPanel.Resources>
                <ResourceDictionary>
                    <Style TargetType="Button" x:Key="ContentDialogLogInButtonStyle" BasedOn="{StaticResource AccentButtonStyle}">
                        <Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Color="{ThemeResource SystemAccentColor}"/>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>
            </StackPanel.Resources>
            <ctControls:Segmented MaxWidth="445" x:Name="SwitchViewsSegmentedView" HorizontalAlignment="Stretch" SelectionMode="Single" Visibility="{x:Bind AddRepoViewModel.IsSettingUpLocalMachine, Mode=OneWay}">
                <i:Interaction.Behaviors>
                    <ic:EventTriggerBehavior EventName="SelectionChanged">
                        <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.ChangePageCommand}" CommandParameter="{x:Bind SwitchViewsSegmentedView.SelectedItem, Mode=OneWay}"/>
                    </ic:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <ctControls:SegmentedItem x:Name="AddViaAccountSegmentedItem" x:Uid="RepoTool_AddViaAccountButton" IsEnabled="{x:Bind AddRepoViewModel.IsAccountButtonEnabled, Mode=OneWay}" AutomationProperties.PositionInSet="1" AutomationProperties.SizeOfSet="2" Tag="Account"/>
                <ctControls:SegmentedItem x:Name="AddViaUrlSegmentedItem" x:Uid="RepoTool_AddViaUrlButton" AutomationProperties.PositionInSet="2" AutomationProperties.SizeOfSet="2" Tag="URL"/>
            </ctControls:Segmented>

            <!-- Adding a repo via URL -->
            <TextBox x:Name="RepoUrlTextBox"
                     x:Uid="RepoUrl"
                     Visibility="{x:Bind AddRepoViewModel.ShowUrlPage, Mode=OneWay}"
                     TextChanged="RepoUrlTextBox_TextChanged"
                     Text="{x:Bind AddRepoViewModel.Url, Mode=TwoWay}"
                     Margin="0, 20, 0, 0"/>
            <TextBlock x:Name="UrlErrorTextBlock" Style="{ThemeResource BaseTextBlockStyle}" Text="{x:Bind AddRepoViewModel.UrlParsingError, Mode=OneWay}" Visibility="{x:Bind AddRepoViewModel.ShouldShowUrlError, Mode=OneWay}"/>

            <!-- Log into account -->
            <!-- Please keep SelectedIndex bound to AccountIndex.  This is used to reset the combobox to empty
            when the user navigates to the account page.-->
            <ComboBox x:Name="RepositoryProviderComboBox" 
                      Visibility="{x:Bind AddRepoViewModel.ShowAccountPage, Mode=OneWay}"
                      HorizontalAlignment="Stretch"
                      x:Uid="RepositoryDisplay"
                      ItemsSource="{x:Bind AddRepoViewModel.ProviderNames}"
                      SelectedIndex="{x:Bind AddRepoViewModel.AccountIndex, Mode=TwoWay}"
                      Margin="0, 20, 0, 0" >
                <i:Interaction.Behaviors>
                    <ic:EventTriggerBehavior EventName="SelectionChanged">
                        <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.RepoProviderSelectedCommand}" CommandParameter="{x:Bind RepositoryProviderComboBox.SelectedItem, Mode=OneWay}"/>
                    </ic:EventTriggerBehavior>
                </i:Interaction.Behaviors>
            </ComboBox>
            <StackPanel x:Name="LoginUi" Visibility="{x:Bind AddRepoViewModel.ShouldShowLoginUi, Mode=OneWay}">
                <!-- Title and Close button -->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="40"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" x:Uid="LoginUIDialogTitle" HorizontalAlignment="Left"
                       Style="{ThemeResource SubtitleTextBlockStyle}" 
                       Margin="16,10,0,0"/>
                    <Button Command="{x:Bind AddRepoViewModel.CancelButtonPressedCommand, Mode=OneWay}" Visibility="{x:Bind AddRepoViewModel.ShouldShowXButtonInLoginUi, Mode=OneWay}" Grid.Column="1" DataContext="{x:Bind}" Style="{ThemeResource AlternateCloseButtonStyle}" VerticalAlignment="Center">
                        <Button.Content>
                            <SymbolIcon Symbol="Cancel"/>
                        </Button.Content>
                    </Button>
                </Grid>
                <Frame Content="{x:Bind AddRepoViewModel.LoginUiContent, Mode=OneWay}" />
            </StackPanel>

            <!-- Show Repositories -->
            <StackPanel x:Name="ShowRepositoriesStackPanel" Visibility="{x:Bind AddRepoViewModel.ShowRepoPage, Mode=OneWay}" Orientation="Vertical" HorizontalAlignment="Stretch" Spacing="10">
                <Grid ColumnSpacing="8" RowSpacing="10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="1.5*"/>
                    </Grid.ColumnDefinitions>
                    <SplitButton x:Name="AccountSplitButton" HorizontalAlignment="Stretch" HorizontalContentAlignment="Left" Grid.Row="0" Content="{x:Bind AddRepoViewModel.SelectedAccount, Mode=OneWay}" Flyout="{x:Bind AddRepoViewModel.AccountsToShow, Mode=OneWay}" IsEnabled="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay, Converter={StaticResource BoolToNegationConverter}}"/>
                    <TextBox x:Name="FilterTextBox" Grid.Column="1" TextChanged="FilterTextBox_TextChanged" x:Uid="RepoTool_FilterTextBox" IsEnabled="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay, Converter={StaticResource BoolToNegationConverter}}" />
                </Grid>
                <Grid Visibility="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay}" Height="300" Width="300">
                    <ProgressRing/>
                </Grid>
                <!-- Removing the SelectionChanged event into a command has far reaching changes because the item that was selected can't be passed
                into the command.  I tried converting this to use a command on SelectionChanged and pass SelectedItems into the command.
                I ran into issues because the viewmodel expects one repository at a time.  Not a list.
                Another issue is .SelectRange() needs to be called to "select" repos when the dialog is opened more than once. -->
                <ListView x:Name="RepositoriesListView" Visibility="{x:Bind AddRepoViewModel.IsFetchingRepos, Mode=OneWay, Converter={StaticResource NegatedBoolToVisibilityConverter}}" SelectionMode="Multiple" Height="300" HorizontalAlignment="Stretch" SelectionChanged="RepositoriesListView_SelectionChanged" ItemsSource="{x:Bind AddRepoViewModel.Repositories, Mode=OneWay}" Margin="0, 12, 0, 12">
                    <ListView.Header>
                        <TextBlock Style="{ThemeResource BodyStrongTextBlockStyle}" x:Uid="RepositoriesList" Margin="0, 0, 0, 8"/>
                    </ListView.Header>
                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="models:RepoViewListItem">
                            <Grid ColumnSpacing="7">
                                <ToolTipService.ToolTip>
                                    <ToolTip IsEnabled="{x:Bind IsRepoNameTrimmed, Mode=OneWay}" Content="{x:Bind RepoDisplayName}"/>
                                </ToolTipService.ToolTip>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="16"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <FontIcon Grid.Column="0" FontSize="16" FontFamily="{StaticResource DevHomeFluentIcons}" Glyph="{x:Bind IsPrivate, Mode=OneWay, Converter={StaticResource BoolToGlyphConverter}}"/>
                                <TextBlock Grid.Column="1" Text="{x:Bind RepoDisplayName}" TextTrimming="CharacterEllipsis">
                                    <i:Interaction.Behaviors>
                                        <ic:EventTriggerBehavior EventName="IsTextTrimmedChanged">
                                            <ic:InvokeCommandAction Command="{x:Bind TextTrimmedCommand}"/>
                                        </ic:EventTriggerBehavior>
                                     </i:Interaction.Behaviors>
                                </TextBlock>
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </StackPanel>
            <TextBlock x:Name="ErrorTextBlock" Style="{ThemeResource BodyStrongTextBlockStyle}" Visibility="{x:Bind AddRepoViewModel.ShowErrorTextBox, Mode=OneWay}" x:Uid="Repo_ToolClonePathError"/>
            <!-- Repo page and URL page both have clonepath + dev drive check box-->
            <Grid Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.ShouldShowFolderPicker, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="5*"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>
                <!-- Folder picker -->
                <StackPanel
                    Grid.Column="0"
                    Spacing="7">
                    <TextBlock 
                        x:Uid="ClonePathForTextBlock" />
                    <TextBox
                        TextChanged="CloneLocation_TextChanged"
                        Text="{x:Bind AddRepoViewModel.FolderPickerViewModel.CloneLocationAlias, Mode=TwoWay}"
                        IsEnabled="False"
                        Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.InDevDriveScenario, Mode=OneWay}"
                        x:Name="DevDriveCloneLocationAliasTextBox" />
                </StackPanel>
                <TextBox x:Uid="ClonePath"
                     TextChanged="CloneLocation_TextChanged" Grid.Column="0" 
                     Text="{x:Bind AddRepoViewModel.FolderPickerViewModel.CloneLocation, Mode=TwoWay}"
                     IsEnabled="{x:Bind AddRepoViewModel.FolderPickerViewModel.IsBrowseButtonEnabled, Mode=OneWay}"
                     Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.InDevDriveScenario, Mode=OneWay, Converter={StaticResource NegatedBoolToVisibilityConverter}}"/>
                <Grid Grid.Column="1">
                    <!-- Workaround to show a tooltip on a disabled button.
                         https://github.com/microsoft/microsoft-ui-xaml/issues/2262 -->
                    <TextBlock>
                    <ToolTipService.ToolTip>
                        <ToolTip x:Uid="ClearCheckboxToBrowse" Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.IsBrowseButtonEnabled, Mode=OneWay, Converter={StaticResource NegatedBoolToVisibilityConverter}}"/>
                    </ToolTipService.ToolTip>
                    </TextBlock>
                    <Button IsEnabled="{x:Bind AddRepoViewModel.FolderPickerViewModel.IsBrowseButtonEnabled, Mode=OneWay}" x:Uid="ClonePath_Button" Margin="5, 27, 0, 0">
                        <i:Interaction.Behaviors>
                            <ic:EventTriggerBehavior EventName="Click">
                                <ic:InvokeCommandAction Command="{x:Bind AddRepoViewModel.OpenFolderPickerCommand}"/>
                            </ic:EventTriggerBehavior>
                        </i:Interaction.Behaviors>
                    </Button>
                </Grid>
            </Grid>
            <TextBlock Text="{x:Bind AddRepoViewModel.FolderPickerViewModel.FolderPickerErrorMessage, Mode=OneWay}" Visibility="{x:Bind AddRepoViewModel.FolderPickerViewModel.ShowFolderPickerError, Mode=OneWay}"/>
            <Grid
                    Visibility="{x:Bind AddRepoViewModel.EditDevDriveViewModel.ShowDevDriveInformation, Mode=OneWay}" 
                    Margin="0 10 0 10"
                    Grid.Row="2"
                    ColumnSpacing="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="7*"/>
                    <ColumnDefinition Width="3*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <CheckBox
                        Click="MakeNewDevDriveCheckBox_Click" 
                        IsEnabled="{x:Bind AddRepoViewModel.EditDevDriveViewModel.IsDevDriveCheckboxEnabled}" 
                        IsChecked="{x:Bind AddRepoViewModel.EditDevDriveViewModel.IsDevDriveCheckboxChecked, Mode=TwoWay}" 
                        Grid.Column="0" 
                        Grid.Row="0"
                        x:Uid="NewDevDriveComboBox"/>
                <HyperlinkButton 
                        x:Uid="CustomizeHyperLink"
                        Grid.Column="1" 
                        Visibility="{x:Bind AddRepoViewModel.EditDevDriveViewModel.ShowCustomizeOption, Mode=OneWay}" 
                        Click="CustomizeDevDriveHyperlinkButton_ClickAsync"
                        Grid.Row="0"
                        Margin="0 -3 0 0"
                        Padding="3" />
                <InfoBar
                        Grid.Row="1"
                        Grid.Column="0" 
                        Grid.ColumnSpan="2"
                        Margin="0 5 0 0"
                        IsClosable="False"
                        IsOpen="True"
                        Severity="Error"
                        HorizontalAlignment="Stretch"
                        x:Uid="DevDriveDefaultDriveCheckBoxError"
                        Visibility="{x:Bind AddRepoViewModel.EditDevDriveViewModel.DevDriveValidationError, Mode=OneWay}"/>
            </Grid>
        </StackPanel>
    </ScrollViewer>
</ContentDialog>