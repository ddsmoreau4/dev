<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdaptiveCardStateNotRecognizedError" xml:space="preserve">
    <value>Adaptive card state not recognized</value>
    <comment>Error text to show when we don't recognize the state of the adaptive card that was given to us</comment>
  </data>
  <data name="AdaptiveCardUnRecognizedAction" xml:space="preserve">
    <value>Action passed to the extension was not recognized. View the extension logs for more information</value>
    <comment>Error text to show when we don't recognize the adaptive card action that was passed to the extension</comment>
  </data>
  <data name="ButtonToLaunchContentDialogLabel" xml:space="preserve">
    <value>More Info</value>
    <comment>Text for a button that will launch a content dialog that displays more information to the user about a disk image</comment>
  </data>
  <data name="CreationInProgress" xml:space="preserve">
    <value>Creating: {0}</value>
    <comment>Locked="{0}" text to tell the user that we're currently creating the virtual machine. {0} is the name of the virtual machine</comment>
  </data>
  <data name="CurrentCheckpoint" xml:space="preserve">
    <value>Current Checkpoint</value>
    <comment>Label text to display in front of the users current checkpoint name. </comment>
  </data>
  <data name="DownloadFileFound" xml:space="preserve">
    <value>File {0} already exists. We'll use this file to create the virtual machine</value>
    <comment>Locked="{0}" text to tell the user that a file exists and we do not need to download it again. {0} is a previously download file. We show the file name in {0}.</comment>
  </data>
  <data name="DownloadForContentDialog" xml:space="preserve">
    <value>Download</value>
    <comment>label text for the download size of the disk image</comment>
  </data>
  <data name="DownloadInProgress" xml:space="preserve">
    <value>Downloading {0}. {1}</value>
    <comment>Locked="{0}" text to tell the user that we are downloading a file from the web. {0} is the file we're downloading. {1} the progress in the form of  "bytes received / total bytes needed". E.g "10 Mb / 400 Mb"</comment>
  </data>
  <data name="DownloadOperationCancelled" xml:space="preserve">
    <value>Unable to download disk image file because the operation was cancelled</value>
    <comment>Error text to tell the user that we weren't able to download the disk file because it was cancelled.</comment>
  </data>
  <data name="DownloadOperationFailed" xml:space="preserve">
    <value>Downloading the disk image file failed. Check the Hyper-V extension logs for more information</value>
    <comment>Error text for when we fail to download the disk image file the user selected from the internet</comment>
  </data>
  <data name="DownloadOperationFailedCheckingHash" xml:space="preserve">
    <value>There was a hash mismatch when attempting to compare the Sha256 hash of the to the expected hash value</value>
    <comment>Error text for when comparing to Sha256 hashes fail</comment>
  </data>
  <data name="DownloadOperationFailedToCreateFile" xml:space="preserve">
    <value>Failed to create the file needed to download the disk image into</value>
    <comment>Error text for when we fail to create the file that the disk image will be downloaded into</comment>
  </data>
  <data name="EnterNewVMNameLabel" xml:space="preserve">
    <value>New virtual machine name</value>
    <comment>Label text for textbox where users will enter the name for their new virtual machine</comment>
  </data>
  <data name="EnterNewVMNamePlaceHolder" xml:space="preserve">
    <value>Enter the name of your new virtual machine</value>
    <comment>place holder text that will appear within a text box</comment>
  </data>
  <data name="ErrorPerformingOperation" xml:space="preserve">
    <value>Unable to perform the requested operation. Check the Dev Home Hyper-V extension's log files for more information.</value>
    <comment>Error text  for when the hyper-v extension is unable to perform an operation the user requests</comment>
  </data>
  <data name="ExtractionInProgress" xml:space="preserve">
    <value>Extracting file {0}. {1}</value>
    <comment>Locked="{0}" text to tell the user that we're extracting a zip file into a location on their computer. {0} is the zip file we're extracting. {1} the progress in the form of  "bytes extracted / total bytes needed". E.g "10 Mb / 400 Mb"</comment>
  </data>
  <data name="InitialCreationFormGenerationFailedError" xml:space="preserve">
    <value>Failed to generate the initial creation form</value>
    <comment>Error text to show the user when the was an error getting the initial disk image selection page in the creation wizard flow</comment>
  </data>
  <data name="LastUpdatedForContentDialog" xml:space="preserve">
    <value>Last updated</value>
    <comment>label text for when the disk image was last updated</comment>
  </data>
  <data name="LocaleForContentDialog" xml:space="preserve">
    <value>Locale</value>
    <comment>label text for locale of operation system that is installed on the disk image</comment>
  </data>
  <data name="NameLabelForNewVirtualMachine" xml:space="preserve">
    <value>Name{0}</value>
    <comment>Locked="{0}" text label that will be on top of the name the user provides in a textbox. {0} is the colon e.g ":" special character</comment>
  </data>
  <data name="NoImagesFoundError" xml:space="preserve">
    <value>Unable to find any disk images in the Hyper-V virtual machine gallery</value>
    <comment>Error text to tell the user there was an issue retrieving the virtual machine disk images from the VM gallery. </comment>
  </data>
  <data name="OperationInProgressError" xml:space="preserve">
    <value>Unable to start the operation because it is already in progress</value>
    <comment>Error text to tell the user that the process to create the virtual machine is already in progress.</comment>
  </data>
  <data name="OsVersionForContentDialog" xml:space="preserve">
    <value>Version</value>
    <comment>label text for version of operating system that is installed on the disk image</comment>
  </data>
  <data name="PrimaryButtonForContentDialogText" xml:space="preserve">
    <value>Ok</value>
    <comment>Text for primary button of the content dialog </comment>
  </data>
  <data name="PrimaryButtonLabelForCreationFlow" xml:space="preserve">
    <value>Next</value>
    <comment>Text to display to the user about what the primary button does in the UI</comment>
  </data>
  <data name="ReviewFormGenerationFailedError" xml:space="preserve">
    <value>Failed to generate the review form</value>
    <comment>Error text to show the user when the was an error getting the review page in the creation wizard flow</comment>
  </data>
  <data name="SecondaryButtonForContentDialogText" xml:space="preserve">
    <value>Cancel</value>
    <comment>Text for the secondary button of the content dialog</comment>
  </data>
  <data name="SecondaryButtonLabelForCreationFlow" xml:space="preserve">
    <value>Previous</value>
    <comment>Text to display to the user about what the secondary button does in the UI.</comment>
  </data>
  <data name="SettingsCardLabel" xml:space="preserve">
    <value>Choose an image to use</value>
    <comment>Label text for a list of cards that appear in the UI</comment>
  </data>
  <data name="VmCredentialRequest.CancelText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="VmCredentialRequest.Description1" xml:space="preserve">
    <value>Dev Home needs VM administrator credentials to install DevSetupAgent service.</value>
  </data>
  <data name="VmCredentialRequest.Description2" xml:space="preserve">
    <value>Please enter credential for the VM administrator account</value>
  </data>
  <data name="VmCredentialRequest.OkText" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="VmCredentialRequest.PasswordErrorMsg" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="VmCredentialRequest.PasswordLabel" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="VmCredentialRequest.Title" xml:space="preserve">
    <value>Dev Home Hyper-V Extension credential request</value>
  </data>
  <data name="VmCredentialRequest.UsernameErrorMsg" xml:space="preserve">
    <value>Username is required</value>
  </data>
  <data name="VmCredentialRequest.UsernameLabel" xml:space="preserve">
    <value>Admin username</value>
  </data>
  <data name="WaitForLoginRequest.Description" xml:space="preserve">
    <value>Please login to &lt;Name&gt; Hyper-V VM to continue configuration. Click Ok after logging on.</value>
  </data>
  <data name="WaitForLoginRequest.Title" xml:space="preserve">
    <value>Dev Home Hyper-V Extension login request.</value>
  </data>
</root>